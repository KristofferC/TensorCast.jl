function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    isdefined(MacroTools, Symbol("#19#20")) && precompile(Tuple{getfield(MacroTools, Symbol("#19#20")),Function})
    isdefined(MacroTools, Symbol("#19#20")) && precompile(Tuple{getfield(MacroTools, Symbol("#19#20")),QuoteNode})
    isdefined(MacroTools, Symbol("#19#20")) && precompile(Tuple{getfield(MacroTools, Symbol("#19#20")),Tuple{Colon,Colon,Colon,Colon,typeof(*)}})
    isdefined(MacroTools, Symbol("#19#20")) && precompile(Tuple{getfield(MacroTools, Symbol("#19#20")),Tuple{Colon,Colon,Colon,typeof(*)}})
    isdefined(MacroTools, Symbol("#19#20")) && precompile(Tuple{getfield(MacroTools, Symbol("#19#20")),Tuple{Colon,Colon,typeof(*),typeof(*)}})
    isdefined(MacroTools, Symbol("#19#20")) && precompile(Tuple{getfield(MacroTools, Symbol("#19#20")),Tuple{Colon,Colon,typeof(*)}})
    isdefined(MacroTools, Symbol("#19#20")) && precompile(Tuple{getfield(MacroTools, Symbol("#19#20")),Tuple{Colon,typeof(*),Colon}})
    isdefined(MacroTools, Symbol("#19#20")) && precompile(Tuple{getfield(MacroTools, Symbol("#19#20")),Tuple{Colon,typeof(*)}})
    isdefined(MacroTools, Symbol("#19#20")) && precompile(Tuple{getfield(MacroTools, Symbol("#19#20")),Tuple{typeof(*),Colon,typeof(*)}})
    isdefined(MacroTools, Symbol("#21#22")) && precompile(Tuple{getfield(MacroTools, Symbol("#21#22")),Int64})
    isdefined(MacroTools, Symbol("#21#22")) && precompile(Tuple{getfield(MacroTools, Symbol("#21#22")),Int64})
    isdefined(MacroTools, Symbol("#21#22")) && precompile(Tuple{getfield(MacroTools, Symbol("#21#22")),LineNumberNode})
    isdefined(MacroTools, Symbol("#21#22")) && precompile(Tuple{getfield(MacroTools, Symbol("#21#22")),QuoteNode})
    isdefined(MacroTools, Symbol("#21#22")) && precompile(Tuple{getfield(MacroTools, Symbol("#21#22")),QuoteNode})
    isdefined(MacroTools, Symbol("#21#22")) && precompile(Tuple{getfield(MacroTools, Symbol("#21#22")),Symbol})
    isdefined(MacroTools, Symbol("#21#22")) && precompile(Tuple{getfield(MacroTools, Symbol("#21#22")),Symbol})
    isdefined(TensorCast, Symbol("##innerparse#37")) && precompile(Tuple{getfield(TensorCast, Symbol("##innerparse#37")),Bool,typeof(TensorCast.innerparse),Expr,Array{Any,1},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    isdefined(TensorCast, Symbol("##standardise#8")) && precompile(Tuple{getfield(TensorCast, Symbol("##standardise#8")),Bool,typeof(TensorCast.standardise),Int64,NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    isdefined(TensorCast, Symbol("#52#53")) && precompile(Tuple{getfield(TensorCast, Symbol("#52#53")),Int64})
    isdefined(TensorCast, Symbol("#52#53")) && precompile(Tuple{getfield(TensorCast, Symbol("#52#53")),Tuple{Colon,typeof(*),typeof(*)}})
    isdefined(TensorCast, Symbol("#52#53")) && precompile(Tuple{getfield(TensorCast, Symbol("#52#53")),Tuple{typeof(*),Colon}})
    precompile(Tuple{Core.kwftype(typeof(TensorCast._macro)),NamedTuple{(:call,),Tuple{CallInfo}},typeof(_macro),Expr,Expr,Expr})
    precompile(Tuple{Core.kwftype(typeof(TensorCast.indexparse)),NamedTuple{(:save,),Tuple{Bool}},typeof(TensorCast.indexparse),Expr,Array{Any,1},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{Type{TensorCast.Reverse{1}},Array{Float64,4}})
    precompile(Tuple{Type{TensorCast.Reverse{1}},Array{Int64,4}})
    precompile(Tuple{Type{TensorCast.Reverse{1}},SubArray{Int64,3,Array{Int64,4},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Int64,Base.Slice{Base.OneTo{Int64}}},false}})
    precompile(Tuple{Type{TensorCast.Reverse{2}},Array{Float64,2}})
    precompile(Tuple{Type{TensorCast.Reverse{3}},Array{Int64,4}})
    precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Float64,2},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Tuple{Base.OneTo{Int64},Base.OneTo{Int64}},typeof(TensorCast.apply),Tuple{Base.Broadcast.Extruded{Array{Function,1},Tuple{Bool},Tuple{Int64}},Base.Broadcast.Extruded{Transpose{Int64,UnitRange{Int64}},Tuple{Bool,Bool},Tuple{Int64,Int64}}}},CartesianIndices{2,Tuple{Base.OneTo{Int64},Base.OneTo{Int64}}},CartesianIndex{2},Int64})
    precompile(Tuple{typeof(Base.Broadcast.copyto_nonleaf!),Array{Int64,3},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3},Tuple{Base.OneTo{Int64},Base.OneTo{Int64},Base.OneTo{Int64}},typeof(+),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3},Nothing,typeof(TensorCast.apply),Tuple{Base.Broadcast.Extruded{Array{Function,1},Tuple{Bool},Tuple{Int64}},Base.Broadcast.Extruded{Transpose{Int64,UnitRange{Int64}},Tuple{Bool,Bool},Tuple{Int64,Int64}},Base.Broadcast.Extruded{Base.ReshapedArray{Int64,3,UnitRange{Int64},Tuple{}},Tuple{Bool,Bool,Bool},Tuple{Int64,Int64,Int64}}}},Int64}},CartesianIndices{3,Tuple{Base.OneTo{Int64},Base.OneTo{Int64},Base.OneTo{Int64}}},CartesianIndex{3},Int64})
    precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(TensorCast.apply),Tuple{Array{Function,1},Irrational{:π},Irrational{:ℯ}}}})
    precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(TensorCast.apply),Tuple{Array{Function,1},UnitRange{Int64}}}})
    precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(TensorCast.orient),Tuple{Array{SubArray{Float64,3,Array{Float64,4},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Int64},true},1},Base.RefValue{Tuple{Colon,Colon,typeof(*),Colon}}}}})
    precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{1},Nothing,typeof(TensorCast.rview),Tuple{Array{Array{Float64,4},1},Base.RefValue{Colon},Base.RefValue{Colon},Int64,Base.RefValue{Colon}}}})
    precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{2},Nothing,typeof(TensorCast.apply),Tuple{Array{Function,1},Transpose{Int64,UnitRange{Int64}}}}})
    precompile(Tuple{typeof(Base.Broadcast.materialize),Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3},Nothing,typeof(+),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3},Nothing,typeof(TensorCast.apply),Tuple{Array{Function,1},Transpose{Int64,UnitRange{Int64}},Base.ReshapedArray{Int64,3,UnitRange{Int64},Tuple{}}}},Int64}}})
    precompile(Tuple{typeof(Base.Broadcast.materialize),TensorCast.LazyCast{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{4},Nothing,Type{Int64},Tuple{PermutedDimsArray{Float64,4,(1, 3, 2, 4),(1, 3, 2, 4),Base.ReshapedArray{Float64,4,RecursiveArrayTools.VectorOfArray{Float64,3,Array{SubArray{Float64,2,Array{Float64,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Int64},true},1}},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}}}}}})
    precompile(Tuple{typeof(Base.Broadcast.restart_copyto_nonleaf!),Array{Real,3},Array{Int64,3},Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3},Tuple{Base.OneTo{Int64},Base.OneTo{Int64},Base.OneTo{Int64}},typeof(+),Tuple{Base.Broadcast.Broadcasted{Base.Broadcast.DefaultArrayStyle{3},Nothing,typeof(TensorCast.apply),Tuple{Base.Broadcast.Extruded{Array{Function,1},Tuple{Bool},Tuple{Int64}},Base.Broadcast.Extruded{Transpose{Int64,UnitRange{Int64}},Tuple{Bool,Bool},Tuple{Int64,Int64}},Base.Broadcast.Extruded{Base.ReshapedArray{Int64,3,UnitRange{Int64},Tuple{}},Tuple{Bool,Bool,Bool},Tuple{Int64,Int64,Int64}}}},Int64}},Float64,CartesianIndex{3},CartesianIndices{3,Tuple{Base.OneTo{Int64},Base.OneTo{Int64},Base.OneTo{Int64}}},CartesianIndex{3},Int64})
    precompile(Tuple{typeof(TensorCast.cast_string),String})
    precompile(Tuple{typeof(TensorCast.diagview),Array{Array{Int64,1},2}})
    precompile(Tuple{typeof(TensorCast.diagview),Array{Float64,2}})
    precompile(Tuple{typeof(TensorCast.diagview),Array{Int64,2}})
    precompile(Tuple{typeof(TensorCast.indexparse),Expr,Array{Expr,1}})
    precompile(Tuple{typeof(TensorCast.indexparse),Expr,Array{Symbol,1}})
    precompile(Tuple{typeof(TensorCast.matmultarget),Expr,Array{Any,1},NamedTuple{(:flat, :outsize, :reversed, :shuffled, :name, :outer, :inner, :innerflat, :static, :left, :right, :redfun, :reduced, :rdims),Tuple{Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Symbol,Array{Any,1},Array{Any,1},Array{Any,1},Bool,Expr,Expr,Symbol,Array{Any,1},Array{Int64,1}}},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.maybestaticsizes),Array{Any,1},Tuple{Colon,Colon,typeof(*)},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}}})
    precompile(Tuple{typeof(TensorCast.maybestaticsizes),Array{Any,1},Tuple{Colon,typeof(*)},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}}})
    precompile(Tuple{typeof(TensorCast.maybestaticsizes),Array{Any,1},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(TensorCast.mul!),Array{Float64,1},Transpose{Float64,Array{Float64,1}},Array{Float64,1}})
    precompile(Tuple{typeof(TensorCast.mul!),Base.ReshapedArray{Float64,2,PermutedDimsArray{Float64,4,(1, 3, 4, 2),(1, 4, 2, 3),Array{Float64,4}},Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64},Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Array{Float64,2},Array{Float64,2}})
    precompile(Tuple{typeof(TensorCast.mul!),Base.ReshapedArray{Float64,2,PermutedDimsArray{Float64,5,(1, 2, 4, 3, 5),(1, 2, 4, 3, 5),Array{Float64,5}},NTuple{4,Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Array{Float64,2},Array{Float64,2}})
    precompile(Tuple{typeof(TensorCast.mul!),Base.ReshapedArray{Float64,2,PermutedDimsArray{Float64,6,(3, 1, 5, 4, 2, 6),(2, 5, 1, 4, 3, 6),Array{Float64,6}},NTuple{5,Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Array{Float64,2},Array{Float64,2}})
    precompile(Tuple{typeof(TensorCast.mul!),Base.ReshapedArray{Float64,2,PermutedDimsArray{Float64,6,(4, 2, 6, 3, 1, 5),(5, 2, 4, 1, 6, 3),Array{Float64,6}},NTuple{5,Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}},Array{Float64,2},Array{Float64,2}})
    precompile(Tuple{typeof(TensorCast.mul!),Transpose{Float64,Array{Float64,1}},Transpose{Float64,Array{Float64,1}},Array{Float64,2}})
    precompile(Tuple{typeof(TensorCast.mul!),Transpose{Float64,Array{Float64,2}},Array{Float64,2},Array{Float64,2}})
    precompile(Tuple{typeof(TensorCast.newoutput),Expr,Array{Any,1},NamedTuple{(:flat, :outsize, :reversed, :shuffled, :name, :outer, :inner, :innerflat, :static, :left, :right, :redfun, :reduced, :rdims),Tuple{Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Symbol,Array{Any,1},Array{Any,1},Array{Any,1},Bool,Expr,Expr,Symbol,Array{Any,1},Array{Int64,1}}},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.newoutput),Expr,Array{Any,1},NamedTuple{(:flat, :outsize, :reversed, :shuffled, :name, :outer, :inner, :innerflat, :static, :left, :right, :redfun, :reduced, :rdims),Tuple{Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Symbol,Array{Any,1},Array{Any,1},Array{Any,1},Bool,Symbol,Expr,Symbol,Array{Any,1},Array{Int64,1}}},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.newoutput),Expr,Array{Any,1},NamedTuple{(:flat, :outsize, :reversed, :shuffled, :name, :outer, :inner, :static, :redfun, :reduced, :rdims, :right),Tuple{Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Symbol,Array{Any,1},Array{Any,1},Bool,Symbol,Array{Any,1},Array{Int64,1},Expr}},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.newoutput),Symbol,Array{Any,1},NamedTuple{(:flat, :outsize, :reversed, :shuffled, :name, :outer, :inner, :innerflat, :static, :left, :right, :redfun, :reduced, :rdims),Tuple{Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Symbol,Array{Any,1},Array{Any,1},Array{Any,1},Bool,Expr,Expr,Expr,Array{Any,1},Array{Int64,1}}},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.newoutput),Symbol,Array{Any,1},NamedTuple{(:flat, :outsize, :reversed, :shuffled, :name, :outer, :inner, :innerflat, :static, :left, :right, :redfun, :reduced, :rdims),Tuple{Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Symbol,Array{Any,1},Array{Any,1},Array{Any,1},Bool,Expr,Expr,Symbol,Array{Any,1},Array{Int64,1}}},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.orient),Array{Int64,3},Tuple{Colon,Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(TensorCast.orient),PermutedDimsArray{Float64,3,(2, 3, 1),(3, 1, 2),Array{Float64,3}},Tuple{typeof(*),Colon,Colon,Colon}})
    precompile(Tuple{typeof(TensorCast.orient),PermutedDimsArray{Float64,3,(3, 2, 1),(3, 2, 1),Array{Float64,3}},Tuple{Colon,typeof(*),Colon,Colon}})
    precompile(Tuple{typeof(TensorCast.orient),PermutedDimsArray{Float64,4,(1, 4, 2, 3),(1, 3, 4, 2),Array{Float64,4}},Tuple{Colon,typeof(*),Colon,typeof(*),Colon,Colon}})
    precompile(Tuple{typeof(TensorCast.orient),PermutedDimsArray{Float64,4,(2, 4, 3, 1),(4, 1, 3, 2),Array{Float64,4}},Tuple{Colon,typeof(*),Colon,Colon,Colon}})
    precompile(Tuple{typeof(TensorCast.orient),PermutedDimsArray{Float64,4,(3, 1, 2, 4),(2, 3, 1, 4),Array{Float64,4}},Tuple{typeof(*),Colon,Colon,Colon,Colon}})
    precompile(Tuple{typeof(TensorCast.orient),PermutedDimsArray{Float64,4,(3, 1, 4, 2),(2, 4, 1, 3),Array{Float64,4}},Tuple{Colon,typeof(*),Colon,typeof(*),Colon,typeof(*),Colon}})
    precompile(Tuple{typeof(TensorCast.orient),PermutedDimsArray{Float64,4,(3, 1, 4, 2),(2, 4, 1, 3),Array{Float64,4}},Tuple{typeof(*),Colon,typeof(*),Colon,typeof(*),Colon,Colon}})
    precompile(Tuple{typeof(TensorCast.orient),PermutedDimsArray{Float64,4,(3, 2, 4, 1),(4, 2, 1, 3),Array{Float64,4}},Tuple{Colon,typeof(*),Colon,typeof(*),Colon,typeof(*),Colon}})
    precompile(Tuple{typeof(TensorCast.orient),Transpose{Float64,Array{Float64,2}},Tuple{typeof(*),Colon,Colon}})
    precompile(Tuple{typeof(TensorCast.orient),Transpose{Float64,SubArray{Float64,2,Array{Float64,4},Tuple{Int64,Base.Slice{Base.OneTo{Int64}},Int64,Base.Slice{Base.OneTo{Int64}}},false}},Tuple{typeof(*),Colon,typeof(*),Colon}})
    precompile(Tuple{typeof(TensorCast.pretty),Expr})
    precompile(Tuple{typeof(TensorCast.recursemacro),Int64,NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.reduce_string),String})
    precompile(Tuple{typeof(TensorCast.reduceparse),Expr,Nothing,NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.rview),Array{Float64,4},Tuple{Int64,Colon,Int64,Colon}})
    precompile(Tuple{typeof(TensorCast.rview),Transpose{Float64,Array{Float64,1}},Int64,Function})
    precompile(Tuple{typeof(TensorCast.saveonesize),Array{Any,1},Expr,NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}}})
    precompile(Tuple{typeof(TensorCast.standardglue),QuoteNode,Array{Any,1},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.tensorprimetidy),QuoteNode})
    precompile(Tuple{typeof(TensorCast.unmatrixshape),Expr,Array{Any,1},Array{Any,1},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},CallInfo})
    precompile(Tuple{typeof(TensorCast.unparse),String,Expr})
    precompile(Tuple{typeof(cat_glue),Array{SArray{Tuple{2,3},Float64,2,6},2},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(cat_glue),Array{SArray{Tuple{2},Float64,1,2},1},Tuple{typeof(*),Colon}})
    precompile(Tuple{typeof(copy_glue),Array{SArray{Tuple{2,3},Float64,2,6},1},Tuple{Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(copy_glue),Array{SArray{Tuple{2,3},Float64,2,6},1},Tuple{Colon,typeof(*),Colon}})
    precompile(Tuple{typeof(copy_glue),Array{SArray{Tuple{2,3},Float64,2,6},2},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(copy_glue),Array{SArray{Tuple{2},Float64,1,2},1},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(copy_glue),Array{SArray{Tuple{2},Float64,1,2},1},Tuple{typeof(*),Colon}})
    precompile(Tuple{typeof(lazy_glue),Array{SArray{Tuple{2,3},Float64,2,6},2},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(lazy_glue),Array{SubArray{Float64,2,Array{Float64,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Int64},true},2},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{Array{Float64,1},2},Tuple{Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{Array{Float64,2},1},Tuple{Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{Array{Float64,2},2},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{Array{Float64,3},1},Tuple{Colon,Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{Array{Float64,4},1},Tuple{Colon,Colon,Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{Array{Int64,1},2},Tuple{Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{SArray{Tuple{2,3},Float64,2,6},1},Tuple{Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{SArray{Tuple{2,3},Float64,2,6},2},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{SArray{Tuple{2},Float64,1,2},1},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{SArray{Tuple{2},Float64,1,2},1},Tuple{typeof(*),Colon}})
    precompile(Tuple{typeof(red_glue),Array{SArray{Tuple{3},Float64,1,3},1},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{SubArray{Float64,1,Array{Float64,2},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},true},1},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{SubArray{Float64,1,Transpose{Float64,Array{Float64,2}},Tuple{Base.Slice{Base.OneTo{Int64}},Int64},false},1},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{SubArray{Float64,2,Array{Float64,3},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Int64},true},2},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{SubArray{Float64,3,Array{Float64,4},Tuple{Base.Slice{Base.OneTo{Int64}},Base.Slice{Base.OneTo{Int64}},Int64,Base.Slice{Base.OneTo{Int64}}},false},1},Tuple{Colon,Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{SubArray{Int64,1,Array{Int64,2},Tuple{Int64,UnitRange{Int64}},true},1},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Array{UnitRange{Int64},1},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),Base.ReinterpretArray{SArray{Tuple{3,3},Float64,2,9},1,Float64,Array{Float64,1}},Tuple{Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(red_glue),SubArray{Array{Int64,1},1,Array{Array{Int64,1},1},Tuple{StepRange{Int64,Int64}},true},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(slicecopy),Array{Float64,2},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(slicecopy),Array{Float64,2},Tuple{typeof(*),Colon}})
    precompile(Tuple{typeof(slicecopy),Array{Float64,4},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(slicecopy),Array{Float64,4},Tuple{typeof(*),Colon,typeof(*),Colon}})
    precompile(Tuple{typeof(slicecopy),PermutedDimsArray{Float64,3,(2, 3, 1),(3, 1, 2),Array{Float64,3}},Tuple{Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(slicecopy),Transpose{Float64,Array{Float64,2}},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(sliceview),Array{Float64,2},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(sliceview),Array{Float64,2},Tuple{typeof(*),Colon}})
    precompile(Tuple{typeof(sliceview),Array{Float64,3},Tuple{Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(sliceview),Array{Float64,3},Tuple{Colon,typeof(*),Colon}})
    precompile(Tuple{typeof(sliceview),Array{Float64,4},Tuple{Colon,Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(sliceview),Array{Float64,4},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(sliceview),Array{Float64,4},Tuple{typeof(*),Colon,typeof(*),Colon}})
    precompile(Tuple{typeof(sliceview),Array{Int64,3},Tuple{typeof(*),Colon,typeof(*)}})
    precompile(Tuple{typeof(sliceview),PermutedDimsArray{Float64,3,(1, 3, 2),(1, 3, 2),Array{Float64,3}},Tuple{Colon,Colon,typeof(*)}})
    precompile(Tuple{typeof(sliceview),PermutedDimsArray{Float64,4,(3, 4, 1, 2),(3, 4, 1, 2),Array{Float64,4}},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(sliceview),PermutedDimsArray{Float64,4,(4, 2, 3, 1),(4, 2, 3, 1),Array{Float64,4}},Tuple{Colon,Colon,typeof(*),typeof(*)}})
    precompile(Tuple{typeof(sliceview),PermutedDimsArray{Float64,5,(2, 4, 5, 1, 3),(4, 1, 5, 2, 3),Array{Float64,5}},Tuple{Colon,Colon,typeof(*),typeof(*),typeof(*)}})
    precompile(Tuple{typeof(sliceview),PermutedDimsArray{Float64,5,(4, 2, 3, 5, 1),(5, 2, 3, 1, 4),Array{Float64,5}},Tuple{Colon,Colon,typeof(*),typeof(*),typeof(*)}})
    precompile(Tuple{typeof(sliceview),SubArray{Int64,2,Array{Int64,2},Tuple{Base.Slice{Base.OneTo{Int64}},UnitRange{Int64}},true},Tuple{typeof(*),Colon}})
    precompile(Tuple{typeof(sliceview),Transpose{Float64,Array{Float64,2}},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(static_glue),Array{SArray{Tuple{2,3},Float64,2,6},2}})
    precompile(Tuple{typeof(static_glue),Array{SArray{Tuple{2},Float64,1,2},1}})
    precompile(Tuple{typeof(static_glue),Array{SArray{Tuple{3},Float64,1,3},1}})
    precompile(Tuple{typeof(static_glue),Base.ReinterpretArray{SArray{Tuple{2},Int64,1,2},1,Int64,Array{Int64,1}}})
    precompile(Tuple{typeof(static_slice),Array{Float64,2},Tuple{Colon,typeof(*)}})
    precompile(Tuple{typeof(static_slice),Array{Float64,4},Size{(1, 2)}})
    precompile(Tuple{typeof(static_slice),Array{Float64,4},Size{(2, 3)}})
    precompile(Tuple{typeof(static_slice),PermutedDimsArray{Float64,4,(4, 2, 3, 1),(4, 2, 3, 1),Array{Float64,4}},Size{(5, 3)}})
    precompile(Tuple{typeof(static_slice),Transpose{Int64,Array{Int64,2}},Size{(3,)}})

    precompile(Tuple{typeof(TensorCast._macro),Expr})
    precompile(Tuple{typeof(TensorCast.indexparse),Expr,Array{Any,1}})
    precompile(Tuple{typeof(TensorCast.indexparse),Symbol,Array{Any,1}})
    precompile(Tuple{typeof(TensorCast.newoutput),Expr,Array{Any,1},NamedTuple{(:flat, :outsize, :reversed, :shuffled, :name, :outer, :inner, :innerflat, :static, :left, :right),Tuple{Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Symbol,Array{Any,1},Array{Any,1},Array{Any,1},Bool,Expr,Expr}},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},TensorCast.CallInfo})
    precompile(Tuple{typeof(TensorCast.standardglue),Symbol,Array{Any,1},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},TensorCast.CallInfo})
    precompile(Tuple{typeof(TensorCast.targetcast),Expr,Array{Any,1},NamedTuple{(:dict, :assert, :mustassert, :seen, :need, :top, :main),Tuple{Dict{Any,Any},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1},Array{Any,1}}},TensorCast.CallInfo})
end
